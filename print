commit cb5aec874567cca24057e69320a73e2bb95bc89a
Author: kiviuk <kiviuk@example.com>
Date:   Sun Jun 1 21:52:47 2025 +0200

    Add OPML podcast feed imports and enhance show notes scrolling
    
    - Introduced support for importing podcast feeds from OPML files (`castero-podcasts.opml.xml` and `google-podcasts-subscriptions.opml.xml`).
    - Enhanced `ScrollableParagraphState` to handle dynamic content dimensions and improve scrolling behavior.
    - Updated show notes layout resizing with adaptive UI updates (`prepare_ui_layout`).
    - Added `unicode-width` dependency for accurate text rendering and line wrapping calculations.

diff --git a/Cargo.lock b/Cargo.lock
index 6890379..d6700a7 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -1215,6 +1215,7 @@ dependencies = [
  "serde_json",
  "thiserror",
  "tokio",
+ "unicode-width 0.2.0",
 ]
 
 [[package]]
diff --git a/Cargo.toml b/Cargo.toml
index 202c2b5..12ae62d 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -16,6 +16,7 @@ tokio = { version = "1.0", features = ["full"] }
 thiserror = "2.0.12"
 serde_json = "1.0.140"
 html2text = "0.15.0"
+unicode-width = "0.2.0"
 
 
 
diff --git a/db/castero-podcasts.opml.xml b/db/castero-podcasts.opml.xml
new file mode 100644
index 0000000..a818041
--- /dev/null
+++ b/db/castero-podcasts.opml.xml
@@ -0,0 +1,53 @@
+<?xml version="1.0" encoding="ASCII"?>
+<opml version="2.0">
+    <head>
+        <title>castero feeds</title>
+    </head>
+    <body>
+        <outline type="rss" text="99% Invisible" xmlUrl="https://feeds.simplecast.com/BqbsxVfO"/>
+        <outline type="rss" text="Algorithms + Data Structures = Programs"
+                 xmlUrl="https://feeds.buzzsprout.com/1501960.rss"/>
+        <outline type="rss" text="BSD Now" xmlUrl="https://www.bsdnow.tv/rss"/>
+        <outline type="rss" text="ClojureStream Podcast"
+                 xmlUrl="https://feeds.soundcloud.com/users/soundcloud:users:627190089/sounds.rss"/>
+        <outline type="rss" text="Coding Blocks" xmlUrl="https://www.codingblocks.net/podcast-feed.xml"/>
+        <outline type="rss"
+                 text="Coding Blocks | Software and Web Programming / Security / Best Practices / Microsoft .NET"
+                 xmlUrl="https://www.codingblocks.net/current-podcast-feed.xml"/>
+        <outline type="rss" text="Dev Interrupted" xmlUrl="https://feeds.buzzsprout.com/1422892.rss"/>
+        <outline type="rss" text="Developer Voices" xmlUrl="https://feeds.zencastr.com/f/oSn1i316.rss"/>
+        <outline type="rss" text="devtools.fm: Developer Tools, Open Source, Software Development"
+                 xmlUrl="https://anchor.fm/s/dd6922b4/podcast/rss"/>
+        <outline type="rss" text="Functional Design in Clojure" xmlUrl="https://clojuredesign.club/index.xml"/>
+        <outline type="rss" text="Functional Geekery" xmlUrl="https://www.functionalgeekery.com/feed/podcast/"/>
+        <outline type="rss" text="Geschichten aus der Geschichte" xmlUrl="https://www.geschichte.fm/feed/mp3/"/>
+        <outline type="rss" text="Happy Path Programming" xmlUrl="https://anchor.fm/s/2ed56aa0/podcast/rss"/>
+        <outline type="rss" text="Huberman Lab" xmlUrl="https://feeds.megaphone.fm/hubermanlab"/>
+        <outline type="rss" text="Indie Hackers" xmlUrl="https://feeds.transistor.fm/the-indie-hackers-podcast"/>
+        <outline type="rss" text="Level-up Engineering" xmlUrl="https://feeds.captivate.fm/level-up-engineering/"/>
+        <outline type="rss" text="Lex Fridman Podcast" xmlUrl="https://lexfridman.com/feed/podcast/"/>
+        <outline type="rss" text="Newcomer" xmlUrl="https://www.newcomer.co/feed/"/>
+        <outline type="rss" text="Podcastillon"
+                 xmlUrl="https://feeds.narando.com/feeds/be2dab30-295e-4102-8aa1-e8542c3c0775/rendered/rss"/>
+        <outline type="rss" text="Programming Throwdown" xmlUrl="https://feeds.transistor.fm/programming-throwdown"/>
+        <outline type="rss" text="QAA Podcast"
+                 xmlUrl="https://feeds.soundcloud.com/users/soundcloud:users:492135420/sounds.rss"/>
+        <outline type="rss" text="Software Engineering Daily" xmlUrl="https://feeds.megaphone.fm/SED4843981401"/>
+        <outline type="rss" text="Software Engineering Radio - the podcast for professional software developers"
+                 xmlUrl="https://seradio.libsyn.com/rss"/>
+        <outline type="rss" text="Software Engineering Unlocked" xmlUrl="https://feeds.simplecast.com/K1_mv0CJ"/>
+        <outline type="rss" text="Software Unscripted"
+                 xmlUrl="https://feeds.resonaterecordings.com/software-unscripted"/>
+        <outline type="rss" text="Stuff You Should Know"
+                 xmlUrl="https://www.omnycontent.com/d/playlist/e73c998e-6e60-432f-8610-ae210140c5b1/a91018a4-ea4f-4130-bf55-ae270180c327/44710ecc-10bb-48d1-93c7-ae270180c33e/podcast.rss"/>
+        <outline type="rss" text="Supermanagers" xmlUrl="https://anchor.fm/s/1bec0d90/podcast/rss"/>
+        <outline type="rss" text="The Array Cast" xmlUrl="https://www.arraycast.com/episodes?format=rss"/>
+        <outline type="rss" text="The Changelog: Software Development, Open Source"
+                 xmlUrl="https://changelog.com/podcast/feed"/>
+        <outline type="rss" text="The History of Rome" xmlUrl="https://historyofrome.libsyn.com/rss"/>
+        <outline type="rss" text="The Secure Developer" xmlUrl="https://feeds.simplecast.com/47yfLpm0"/>
+        <outline type="rss" text="The Stack Overflow Podcast" xmlUrl="https://feeds.simplecast.com/XA_851k3"/>
+        <outline type="rss" text="Tooling Talks" xmlUrl="https://feeds.buzzsprout.com/1830936.rss"/>
+        <outline type="rss" text="Verbrechen" xmlUrl="https://verbrechen.podigee.io/feed/mp3"/>
+    </body>
+</opml>
diff --git a/db/google-podcasts-subscriptions.opml.xml b/db/google-podcasts-subscriptions.opml.xml
new file mode 100644
index 0000000..8bc9290
--- /dev/null
+++ b/db/google-podcasts-subscriptions.opml.xml
@@ -0,0 +1,66 @@
+<?xml version="1.0" encoding="utf-8" standalone="no"?>
+<opml version="1.0">
+    <head>
+        <title>Google Podcasts Feeds</title>
+    </head>
+    <body>
+        <outline text="feeds">
+            <outline xmlUrl="https://feeds.pacific-content.com/commandlineheroes" type="rss"
+                     text="Command Line Heroes"/>
+            <outline xmlUrl="https://feeds.buzzsprout.com/1714721.rss" type="rss"
+                     text="GOTO - Today, Tomorrow and the Future"/>
+            <outline xmlUrl="https://feeds.resonaterecordings.com/software-unscripted" type="rss"
+                     text="Software Unscripted"/>
+            <outline xmlUrl="https://feeds.soundcloud.com/users/soundcloud:users:981779980/sounds.rss" type="rss"
+                     text="ICRC Humanitarian Law and Policy Blog"/>
+            <outline xmlUrl="https://feeds.transistor.fm/programming-throwdown" type="rss"
+                     text="Programming Throwdown"/>
+            <outline xmlUrl="https://scala.love/feed/sonus-feed" type="rss" text="Scala Love"/>
+            <outline xmlUrl="https://www.codingblocks.net/current-podcast-feed.xml" type="rss"
+                     text="Coding Blocks | Software and Web Programming / Security / Best Practices / Microsoft .NET"/>
+            <outline xmlUrl="https://www.codingblocks.net/podcast-feed.xml" type="rss" text="Coding Blocks"/>
+            <outline xmlUrl="https://www.bsdnow.tv/rss" type="rss" text="BSD Now"/>
+            <outline xmlUrl="https://www.arraycast.com/episodes?format=rss" type="rss" text="The Array Cast"/>
+            <outline xmlUrl="https://feeds.buzzsprout.com/1501960.rss" type="rss"
+                     text="Algorithms + Data Structures = Programs"/>
+            <outline xmlUrl="https://pc.argudiss.de/" type="rss" text="Aus dem Argudiss-Archiv"/>
+            <outline xmlUrl="https://feeds.simplecast.com/dnJhzmyN" type="rss" text="Verbrechen"/>
+            <outline xmlUrl="https://anchor.fm/s/eeb9bec/podcast/rss" type="rss" text="Vitamin X - der Podcast"/>
+            <outline xmlUrl="https://feeds.buzzsprout.com/1890340.rss" type="rss" text="The Deprogram"/>
+            <outline xmlUrl="https://feeds.megaphone.fm/hubermanlab" type="rss" text="Huberman Lab"/>
+            <outline xmlUrl="https://feeds.buzzsprout.com/1830936.rss" type="rss" text="Tooling Talks"/>
+            <outline xmlUrl="https://feeds.simplecast.com/BqbsxVfO" type="rss" text="99% Invisible"/>
+            <outline xmlUrl="https://historyofrome.libsyn.com/rss" type="rss" text="The History of Rome"/>
+            <outline xmlUrl="https://www.zeitsprung.fm/feed/ogg/" type="rss" text="Geschichten aus der Geschichte"/>
+            <outline xmlUrl="https://generalintellectunit.net/feed.xml" type="rss" text="General Intellect Unit"/>
+            <outline xmlUrl="https://feeds.soundcloud.com/users/soundcloud:users:627190089/sounds.rss" type="rss"
+                     text="ClojureStream Podcast"/>
+            <outline xmlUrl="https://feeds.therepl.net/therepl" type="rss" text="The REPL"/>
+            <outline xmlUrl="https://clojuredesign.club/index.xml" type="rss" text="Functional Design in Clojure"/>
+            <outline xmlUrl="https://www.functionalgeekery.com/feed/podcast/" type="rss" text="Functional Geekery"/>
+            <outline xmlUrl="https://feeds.megaphone.fm/sed" type="rss" text="Software Engineering Daily"/>
+            <outline xmlUrl="https://seradio.libsyn.com/rss" type="rss"
+                     text="Software Engineering Radio - the podcast for professional software developers"/>
+            <outline xmlUrl="https://www.newcomer.co/feed" type="rss" text="Newcomer"/>
+            <outline xmlUrl="https://feeds.narando.com/feeds/be2dab30-295e-4102-8aa1-e8542c3c0775/rendered/rss"
+                     type="rss" text="Podcastillon"/>
+            <outline xmlUrl="https://lexfridman.com/feed/podcast/" type="rss" text="Lex Fridman Podcast"/>
+            <outline
+                    xmlUrl="https://www.omnycontent.com/d/playlist/e73c998e-6e60-432f-8610-ae210140c5b1/a91018a4-ea4f-4130-bf55-ae270180c327/44710ecc-10bb-48d1-93c7-ae270180c33e/podcast.rss"
+                    type="rss" text="Stuff You Should Know"/>
+            <outline xmlUrl="https://video-api.wsj.com/podcast/rss/wsj/tech-news-briefing" type="rss"
+                     text="WSJ Tech News Briefing"/>
+            <outline xmlUrl="https://feeds.simplecast.com/K1_mv0CJ" type="rss" text="Software Engineering Unlocked"/>
+            <outline xmlUrl="https://feeds.buzzsprout.com/1422892.rss" type="rss" text="Dev Interrupted"/>
+            <outline xmlUrl="https://feeds.captivate.fm/level-up-engineering/" type="rss" text="Level-up Engineering"/>
+            <outline xmlUrl="https://anchor.fm/s/1bec0d90/podcast/rss" type="rss" text="Supermanagers"/>
+            <outline xmlUrl="https://feeds.simplecast.com/47yfLpm0" type="rss" text="The Secure Developer"/>
+            <outline xmlUrl="https://changelog.com/podcast/feed" type="rss"
+                     text="The Changelog: Software Development, Open Source"/>
+            <outline xmlUrl="https://feeds.soundcloud.com/users/soundcloud:users:492135420/sounds.rss" type="rss"
+                     text="QAA Podcast"/>
+            <outline xmlUrl="https://feeds.simplecast.com/XA_851k3" type="rss" text="The Stack Overflow Podcast"/>
+            <outline xmlUrl="https://feeds.transistor.fm/the-indie-hackers-podcast" type="rss" text="Indie Hackers"/>
+        </outline>
+    </body>
+</opml>
diff --git a/podcast.json b/podcast.json
index 30be29a..3dabcc7 100644
--- a/podcast.json
+++ b/podcast.json
@@ -807,5 +807,5 @@
       "size_in_bytes": 76798701
     }
   ],
-  "last_updated": "2025-06-01T16:47:21.762917Z"
+  "last_updated": "2025-06-01T19:47:48.203347Z"
 }
\ No newline at end of file
diff --git a/src/app.rs b/src/app.rs
index 1e5f5b6..7733cef 100644
--- a/src/app.rs
+++ b/src/app.rs
@@ -44,7 +44,6 @@ impl App {
             selected_episode_index: None,
             playing_episode: None,
             focused_panel: FocusedPanel::default(), // Initialize focused panel
-            //show_notes_scroll: 0,                   // Initialize scroll to 0
             show_notes_state: ScrollableParagraphState::default(),
         };
 
@@ -332,6 +331,8 @@ pub fn start_ui(initial_app: Option<App>) -> Result<()> {
 
 pub fn run_app_loop<B: Backend>(terminal: &mut Terminal<B>, app: &mut App) -> Result<()> {
     while !app.should_quit {
+        let frame_size = terminal.get_frame().size(); // Fetch once before drawing
+        crate::ui::prepare_ui_layout(app, frame_size);
         terminal.draw(|f| crate::ui::ui::<B>(f, app))?;
 
         if event::poll(std::time::Duration::from_millis(100))? {
diff --git a/src/main.rs b/src/main.rs
index 5d753d9..078f45d 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -31,6 +31,31 @@ const SAMPLE_SHOW_NOTES_1: &str = r#"
 
 <p>Be sure to <strong>subscribe</strong> and leave us a review on your favorite podcast app!</p>
 "#;
+const SAMPLE_SHOW_NOTES_2: &str = r#"
+123456789012345678901234567890
+223456789012345678901234567890
+323456789012345678901234567890
+423456789012345678901234567890
+523456789012345678901234567890
+623456789012345678901234567890
+723456789012345678901234567890
+823456789012345678901234567890
+923456789012345678901234567890
+102345678901234567890123456789
+112345678901234567890123456789
+122345678901234567890123456789
+13v
+142345678901234567890123456789
+152345678901234567890123456789
+16v
+172345678901234567890123456789
+182345678901234567890123456789
+192345678901234567890123456789
+202345678901234567890123456789
+212345678901234567890123456789
+222345678901234567890123456789
+232345678901234567890123456789
+"#;
 
 #[tokio::main]
 async fn main() -> anyhow::Result<()> {
@@ -62,7 +87,7 @@ async fn main() -> anyhow::Result<()> {
         Episode::new(
             EpisodeID::new("ep1"),
             "First Episode".to_string(),
-            Some(SAMPLE_SHOW_NOTES_1.to_string()),
+            Some(SAMPLE_SHOW_NOTES_2.to_string()),
             Utc::now(),
             Some("20:00".to_string()),
             "http://example.com/ep1.mp3".to_string(),
diff --git a/src/ui.rs b/src/ui.rs
index 8518514..b942070 100644
--- a/src/ui.rs
+++ b/src/ui.rs
@@ -1,13 +1,12 @@
+use crate::app::{App, FocusedPanel};
 use ratatui::{
     Frame,
-    backend::Backend,                        // Added Rect for inner areas if needed
-    layout::{Constraint, Direction, Layout}, // Added Modifier for more styling options
-    style::{Color, Modifier, Style},         // Added Wrap for Paragraphs
-    widgets::{Block, Borders, List, ListItem, Paragraph, Wrap},
+    backend::Backend,
+    layout::{Constraint, Direction, Layout, Rect}, // Added Rect for inner areas if needed
+    style::{Color, Modifier, Style},               // Added Modifier for more styling options
+    widgets::{Block, Borders, List, ListItem, Paragraph, Wrap}, // Added Wrap for Paragraphs
 };
 
-use crate::app::{App, FocusedPanel};
-
 /// Formats a given description string by either processing it as HTML, plain text,
 /// or returning a default message if the description is `None`.
 ///
@@ -63,38 +62,92 @@ pub fn format_description(description: Option<&str>) -> String {
         }
         None => "No show notes available for this episode.".to_string(),
     }
+    .trim()
+    .to_string()
 }
 
-pub fn ui<B: Backend>(f: &mut Frame, app: &App) {
-    // === Layout Definitions ===
+pub struct LayoutChunks {
+    pub player_chunk: Rect,
+    pub content_chunk: Rect,
+    pub hint_chunk: Rect,
+    pub podcasts_chunk: Rect,
+    pub episodes_chunk: Rect,
+    pub show_notes_chunk: Rect,
+}
 
-    // Main layout: Player (top) and Content (bottom)
+pub fn compute_layout(frame_size: Rect) -> LayoutChunks {
     let main_chunks = Layout::default()
         .direction(Direction::Vertical)
-        .constraints([
-            Constraint::Length(3), // Player top
-            Constraint::Min(0),    // Content below
-            Constraint::Length(1), // Hint bar at the bottom (or 2 for borders + text)
-        ])
-        .split(f.size());
+        .constraints([Constraint::Length(3), Constraint::Min(0), Constraint::Length(1)])
+        .split(frame_size);
 
-    let player_chunk = main_chunks[0];
     let content_chunk = main_chunks[1];
-    let hint_chunk = main_chunks[2]; // Chunk for the hint bar
 
-    // Content layout: Podcasts | Episodes | Show Notes
     let content_columns = Layout::default()
         .direction(Direction::Horizontal)
         .constraints([
             Constraint::Percentage(33),
             Constraint::Percentage(33),
-            Constraint::Percentage(34), // Use 34 to sum to 100 with two 33s
+            Constraint::Percentage(34),
         ])
         .split(content_chunk);
 
-    let podcasts_chunk = content_columns[0];
-    let episodes_chunk = content_columns[1];
-    let show_notes_chunk = content_columns[2];
+    LayoutChunks {
+        player_chunk: main_chunks[0],
+        content_chunk,
+        hint_chunk: main_chunks[2],
+        podcasts_chunk: content_columns[0],
+        episodes_chunk: content_columns[1],
+        show_notes_chunk: content_columns[2],
+    }
+}
+
+/// This function prepares layout (only for show_notes height right now)
+/// and updates mutable state outside the draw closure.
+pub fn prepare_ui_layout(app: &mut App, frame_size: Rect) {
+    let layout_chunks = compute_layout(frame_size);
+
+    let is_show_notes_focused = app.focused_panel == FocusedPanel::ShowNotes; // Need app state for focus style
+    let focused_style = Style::default().fg(Color::Cyan); // Assuming these are accessible or defined
+    let default_style = Style::default().fg(Color::White);
+
+    // Temporarily construct the block to get its inner dimensions.
+    // The title string here doesn't have to be the final dynamic one,
+    // as long as it doesn't change the *height* of the title area.
+    // If the title string can wrap and take multiple lines, this becomes more complex.
+    // Assuming single-line titles for now for simplicity of inner calculation.
+    let temp_show_notes_block = Block::default()
+        .title("Show Notes Placeholder") // Placeholder or actual title logic
+        .borders(Borders::ALL)
+        .border_style(if is_show_notes_focused { focused_style } else { default_style });
+
+    // 2. Calculate the inner area of this block IF IT WERE RENDERED in show_notes_chunk.
+    let inner_area = temp_show_notes_block.inner(layout_chunks.show_notes_chunk);
+    //
+    // eprintln!("--- UI Frame ---");
+    // eprintln!("Show Notes Chunk: {:?}", layout_chunks.show_notes_chunk);
+    // eprintln!("Inner Area for Paragraph: {:?}", inner_area);
+    // eprintln!("Set state dimensions to: width={}, height={}", inner_area.width, inner_area.height);
+    // eprintln!("App Show Notes State - panel_w: {}, panel_h: {}", app.show_notes_state.panel_width, app.show_notes_state.panel_height);
+    // eprintln!("App Show Notes State - content lines: {}", app.show_notes_state.content.lines().count());
+    // eprintln!("App Show Notes State - max_scroll: {}", app.show_notes_state.max_scroll_vertical()); // Call internal directly for debug
+    // eprintln!("App Show Notes State - current_scroll: {}", app.show_notes_state.scroll_offset_vertical);
+
+    app.show_notes_state.set_dimensions(inner_area.width, inner_area.height);
+}
+
+pub fn ui<B: Backend>(f: &mut Frame, app: &App) {
+    // === Layout Definitions ===
+
+    let layout = compute_layout(f.size());
+
+    let player_chunk = layout.player_chunk;
+    // let content_chunk = layout.content_chunk;
+    let hint_chunk = layout.hint_chunk;
+
+    let podcasts_chunk = layout.podcasts_chunk;
+    let episodes_chunk = layout.episodes_chunk;
+    let show_notes_chunk = layout.show_notes_chunk;
 
     // === Define Styles ===
     let default_style = Style::default().fg(Color::White);
diff --git a/src/widgets/scrollable_paragraph.rs b/src/widgets/scrollable_paragraph.rs
index ce4afcb..80312f4 100644
--- a/src/widgets/scrollable_paragraph.rs
+++ b/src/widgets/scrollable_paragraph.rs
@@ -1,11 +1,15 @@
+use unicode_width::UnicodeWidthChar;
+
 #[derive(Debug, Default, Clone)]
 pub struct ScrollableParagraphState {
     pub content: String, // Or ratatui::text::Text<'a> for styled text
     pub scroll_offset_vertical: u16,
     pub scroll_offset_horizontal: u16, // If you want horizontal scrolling too
-                                       // You might also store:
-                                       // - total_content_lines: usize (if you can calculate/estimate it)
-                                       // - panel_height: u16 (from the layout, to cap scrolling)
+    // You might also store:
+    // - total_content_lines: usize (if you can calculate/estimate it)
+    // - panel_height: u16 (from the layout, to cap scrolling)
+    pub panel_height: u16, // <-- new
+    pub panel_width: u16,  // Add this for wrap-aware calculations
 }
 
 impl ScrollableParagraphState {
@@ -14,23 +18,81 @@ impl ScrollableParagraphState {
             content,
             scroll_offset_vertical: 0,
             scroll_offset_horizontal: 0,
-            // ..
+            panel_height: 0,
+            panel_width: 0,
+        }
+    }
+    fn calculate_content_height_lines(&self) -> u16 {
+        // You are calculating calculate_content_height_lines() on the fly whenever max_scroll_vertical()
+        // (and thus scroll_down()) is called, and also when set_dimensions() calls max_scroll_vertical().
+        // This is fine, just potentially less performant if content is huge and these are called frequently,
+        // but for typical show notes, it might be acceptable.
+        let available_width = self.panel_width.saturating_sub(self.scroll_offset_horizontal);
+
+        if available_width == 0 {
+            return 0; // No space to render anything
         }
+        let available_width_usize = available_width as usize;
+
+        let total_rendered_lines = self.content.lines().fold(0u16, |acc, original_line| {
+            let line_unicode_width: usize =
+                original_line.chars().map(|c| UnicodeWidthChar::width(c).unwrap_or(0)).sum();
+
+            let rendered_rows_for_this_line = if line_unicode_width == 0 {
+                1 // An empty original line still takes up one rendered line
+            } else {
+                // Ceiling division: (numerator + denominator - 1) / denominator
+                // How many groups of `denominator` fit into `numerator`, rounding UP:
+                ((line_unicode_width + available_width_usize - 1) / available_width_usize) as u16
+            };
+            // eprintln!("Line: '{}', unicode_width: {}, panel_w: {}, rows: {}", original_line, line_unicode_width, self.panel_width, rendered_rows_for_this_line);
+            acc.saturating_add(rendered_rows_for_this_line)
+        });
+
+        total_rendered_lines
     }
 
+    pub fn max_scroll_vertical(&self) -> u16 {
+        let total_content_height = self.calculate_content_height_lines();
+        total_content_height.saturating_sub(self.panel_height)
+    }
     pub fn set_content(&mut self, content: String) {
-        self.content = content;
+        // eprintln!("--- ScrollableParagraphState::set_content ---");
+        // eprintln!("Received content (first 200 chars): {:.200}", content);
+        // eprintln!("Content total original lines: {}", content.lines().count());
+
+        self.content = content.trim().to_string();
         self.scroll_offset_vertical = 0; // Reset scroll when content changes
         self.scroll_offset_horizontal = 0;
     }
 
+    // You'll also need a method to set the panel_width and panel_height.
+    // This should be called from ui.rs whenever the layout chunk size for show notes is known.
+    pub fn set_dimensions(&mut self, width: u16, height: u16) {
+        let mut needs_scroll_recalc = false;
+        if self.panel_width != width {
+            self.panel_width = width;
+            needs_scroll_recalc = true;
+        }
+        if self.panel_height != height {
+            self.panel_height = height;
+            needs_scroll_recalc = true; // Height change also affects max_scroll
+        }
+
+        if needs_scroll_recalc {
+            // If dimensions change, the current scroll_offset_vertical might be invalid.
+            // It should be clamped against the new max_scroll.
+            let max_s = self.max_scroll_vertical();
+            self.scroll_offset_vertical = self.scroll_offset_vertical.min(max_s);
+        }
+    }
     pub fn scroll_up(&mut self, amount: u16) {
         self.scroll_offset_vertical = self.scroll_offset_vertical.saturating_sub(amount);
     }
 
-    pub fn scroll_down(&mut self, amount: u16 /*, max_scroll: u16 */) {
-        // If you had max_scroll:
-        // self.scroll_offset_vertical = self.scroll_offset_vertical.saturating_add(amount).min(max_scroll);
-        self.scroll_offset_vertical = self.scroll_offset_vertical.saturating_add(amount);
+    pub fn scroll_down(&mut self, amount: u16) {
+        let max_scroll = self.max_scroll_vertical();
+        self.scroll_offset_vertical =
+            self.scroll_offset_vertical.saturating_add(amount).min(max_scroll);
     }
 }
